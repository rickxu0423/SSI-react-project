{"version":3,"sources":["containers/menu/LeftMenu.js","routes.js","containers/header/Header.js","actions/header/headerActions.js","actions/types.js","containers/Layout.js","reducers/header/headerReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","nested","paddingLeft","spacing","LeftMenu","classes","React","useState","open","setOpen","List","component","aria-labelledby","className","ListItem","button","ListItemIcon","ListItemText","primary","onClick","Collapse","in","timeout","unmountOnExit","disablePadding","BaseRouter","exact","path","Header","props","handleClick","show","closeLeftMenu","showLeftMenu","state","bind","this","Button","aria-controls","aria-haspopup","Menu","id","keepMounted","Component","connect","header","type","Layout","console","log","children","initialState","combineReducers","action","middleware","thunk","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","store","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","App","loading","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa55a615.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport DraftsIcon from '@material-ui/icons/Drafts';\nimport SendIcon from '@material-ui/icons/Send';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport StarBorder from '@material-ui/icons/StarBorder';\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      width: '100%',\n      maxWidth: 360,\n      backgroundColor: theme.palette.background.paper,\n    },\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n}));\n  \nexport default function LeftMenu() {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(true);\n\n    const handleClick = () => {\n        setOpen(!open);\n    };\n\n    return (\n        <List\n        component=\"nav\"\n        aria-labelledby=\"nested-list-subheader\"\n        className={classes.root}\n        >\n        <ListItem button>\n            <ListItemIcon>\n            <SendIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Sent mail\" />\n        </ListItem>\n        <ListItem button>\n            <ListItemIcon>\n            <DraftsIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Drafts\" />\n        </ListItem>\n        <ListItem button onClick={handleClick}>\n            <ListItemIcon>\n            <InboxIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Inbox\" />\n            {open ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n            <List component=\"div\" disablePadding>\n            <ListItem button className={classes.nested}>\n                <ListItemIcon>\n                <StarBorder />\n                </ListItemIcon>\n                <ListItemText primary=\"Starred\" />\n            </ListItem>\n            </List>\n        </Collapse>\n        </List>\n    );\n}\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport LeftMenu from './containers/menu/LeftMenu';\n\nconst BaseRouter = () => (\n    <div>\n        <Route exact path ='/home' component={LeftMenu} />\n    </div>\n);\n\nexport default BaseRouter;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\n//import MenuItem from '@material-ui/core/MenuItem';\n\nimport { connect } from 'react-redux';\nimport { showLeftMenu, closeLeftMenu } from '../../actions/header/headerActions';\n\nclass Header extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    componentDidMount() {\n        this.props.showLeftMenu();\n    }\n    \n    handleClick = () => {\n        if (this.props.show) this.props.closeLeftMenu();\n        else this.props.showLeftMenu();\n    };\n    \n    render() {\n        \n        return (\n            <div>\n            <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={this.handleClick}>\n                Open Menu\n            </Button>\n            <Menu id=\"simple-menu\" keepMounted></Menu>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    show: state.header.show,\n})\n\n\nexport default connect(mapStateToProps, { showLeftMenu, closeLeftMenu })(Header);\n","import { SHOW_LEFT_MENU, CLOSE_LEFT_MENU } from '../types'\n\nexport const showLeftMenu = () => {\n    return {\n        type: SHOW_LEFT_MENU,\n        show: true,\n    }\n}\n\nexport const closeLeftMenu = () => {\n    return {\n        type: CLOSE_LEFT_MENU,\n        show: false,\n    }\n}","export const SHOW_LEFT_MENU = 'SHOW_LEFT_MENU';\nexport const CLOSE_LEFT_MENU = 'CLOSE_LEFT_MENU';","import React from 'react';\n//import { Link } from 'react-router-dom';\nimport Header from './header/Header';\nimport LeftMenu from './menu/LeftMenu'\n\nimport { connect } from 'react-redux';\n\nclass Layout extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n    };\n\n    render() {\n        console.log(this.props.show);\n        return(\n            <div className='layout-container'>\n                <div><Header /></div>\n                { this.props.show ? <LeftMenu /> : null}\n                <div>\n                    {this.props.children}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    show: state.header.show,\n})\n\n\nexport default connect(mapStateToProps)(Layout);\n\n","import { SHOW_LEFT_MENU, CLOSE_LEFT_MENU } from '../../actions/types'\n\nconst initialState = {\n    show: true,\n}\n\nexport default function (state=initialState, action) {\n    switch (action.type) {\n        case SHOW_LEFT_MENU:\n            return {\n                ...state,\n                show: true,\n            };\n        \n        case CLOSE_LEFT_MENU:\n            return {\n                ...state,\n                show: false,\n            };\n\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport headerReducer from './header/headerReducer'\n\nexport default combineReducers({\n    header: headerReducer,\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nimport storage from 'redux-persist/lib/storage';\nimport { persistReducer} from 'redux-persist';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst persistConfig = {\n    key: 'root',\n    storage: storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = createStore(\n    persistedReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__&& window.__REDUX_DEVTOOLS_EXTENSION__(),\n    )\n)\n\n\nexport default store","import React from 'react';\nimport BaseRouter from './routes'\nimport { HashRouter as Router } from 'react-router-dom';\nimport Layout from './containers/Layout'\n\nimport { Provider } from 'react-redux';\nimport store from './store'\nimport { persistStore } from 'redux-persist'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nconst persistor = persistStore(store);\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <Router>\n            <Layout>\n              <BaseRouter />\n            </Layout>\n          </Router>\n        </PersistGate>\n      </Provider>\n    </div>\n  );\n}                               \n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}